{"version":3,"file":"riot-typed.es.js","sources":["../src/index.ts"],"sourcesContent":["// import \"reflect-metadata\";\n\nimport * as riot from \"riot\";\n\nconst DEF_KEY = '_TAG_DEF';\n\nfunction register(name: string, props: {tmpl?: string, css?: string, attrs?: string}, target: Function) {\n  let def = (<any>riot).util.misc.extend({}, target[DEF_KEY], props);\n  target[DEF_KEY] = def;\n\n  riot.tag(name, def.tmpl || '', def.css, def.attrs, function (opts) {\n    const obj = Object.create(target.prototype);\n    const { init } = obj;\n    if (typeof init !== 'undefined') {\n      // recovery original init property when mixin\n      obj.init = () => this.init = typeof init === 'function' ? init.bind(this) : init;\n    }\n\n    this.mixin(obj);//copy properties so the next line would not complain\n    target.call(this, opts);//call constructor\n\n    this.on('unmount', () => this.dispose());\n  });\n}\n\n/**\n* decorator on class that extends Tag.\n* that defines a riot tag with template and the class.\n* see riot.tag()\n*/\nexport function tag(name: string, tmpl?: string | { tmpl?: string, css?: string, attrs?: string }): (target: Function) => void {\n  return function (target: Function) {\n    // target is the constructor function\n    if (typeof tmpl === 'object') {\n      register(name, tmpl, target)\n    } else {\n      register(name, {tmpl}, target)\n    }\n  }\n}\n\n/**\n   riot tag\n  */\nexport class Tag<TOpts> implements RiotTag {\n\n  /**\n  * called when unmount\n  */\n  dispose() {\n\n  }\n\n  isMounted: boolean;\n\n  /**\n  * options passed in for Tag\n  */\n  opts: TOpts;\n\n  /**\n  * the root element that the Tag is mounted on\n  */\n  root: RiotHtmlElement;\n\n  /**\n  * parent Tag\n  */\n  parent: RiotTag;\n\n  /**\n  * child Tags\n  */\n  tags: { [tagNameOrNameOnTheTag: string]: (RiotTag | Array<RiotTag>) };\n\n\n  /**\n   * refs to HTML Element or riot tags\n   */\n  refs: {\n    [refNameOnTheElementOrTag: string]: (HTMLElement | RiotTag | Array<HTMLElement | RiotTag>)\n  };\n\n  /**\n  * apply update on elements\n  */\n  update: (data?: any) => void;\n\n  /**\n  * umount Tag\n  */\n  unmount: {\n    (): void;\n    (keepTheParent: boolean): void;\n  };\n\n  mixin: (...mixins: Array<string | Object>) => void;\n\n  /**\n  * hook Tag life events:\n  *   before-mount, mount, before-unmount, unmount, update, updated\n  */\n  on: (events: string, handler: Function) => this;\n\n  /**\n  * hook Tag life events but only will be triggered only once\n  */\n  one: (events: string, handler: Function) => this;\n\n  /**\n  * unhook Tag life events\n  */\n  off: (events: string, handler?: Function) => this;\n\n  /**\n  * trigger some events\n  */\n  trigger: (events: string, ...data: any[]) => this;\n}\n"],"names":["const","let","riot.util","riot.tag","this"],"mappings":";;;AAAA;AAEA,AAEAA,IAAM,OAAO,GAAG,UAAU,CAAC;AAE3B,kBAAkB,IAAY,EAAE,KAAoD,EAAE,MAAgB;IACpGC,IAAI,GAAG,GAASC,IAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC;IACnE,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;IAEtBC,GAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,EAAE,UAAU,IAAI;;;QAC/DH,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC5C,IAAQ,IAAI,YAAN;QACN,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;;YAE/B,GAAG,CAAC,IAAI,GAAG,qBAAMI,MAAI,CAAC,IAAI,GAAG,OAAO,IAAI,KAAK,UAAU,GAAG,IAAI,CAAC,IAAI,CAACA,MAAI,CAAC,GAAG,IAAI,GAAA,CAAC;SAClF;QAED,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAExB,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,qBAAMA,MAAI,CAAC,OAAO,EAAE,GAAA,CAAC,CAAC;KAC1C,CAAC,CAAC;CACJ;;;;;;AAOD,eAAoB,IAAY,EAAE,IAA+D;IAC/F,OAAO,UAAU,MAAgB;;QAE/B,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;SAC7B;aAAM;YACL,QAAQ,CAAC,IAAI,EAAE,EAAC,MAAA,IAAI,EAAC,EAAE,MAAM,CAAC,CAAA;SAC/B;KACF,CAAA;CACF;;;;AAKM;;cAKL,OAAO;GAEN,CAAA,AAqEH;;"}